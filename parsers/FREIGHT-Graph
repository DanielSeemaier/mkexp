# -*-awk-*-
BEGIN {
    header()
    reset()
}

/__BEGIN_FILE__/ {
    sub(/__BEGIN_FILE__ /, "", $0)
    split($0, parts, "___")
    data["Graph"] = parts[1]

    split(parts[2], parts, "_")
    for (i in parts) {
        if (match(parts[i], /k([0-9]+)/, m)) {
            data["K"] = m[1]
        } else if (match(parts[i], /P([0-9]+)x([0-9]+)x([0-9]+)/, m)) {
            data["NumNodes"] = m[1]
            data["NumMPIsPerNode"] = m[2]
            data["NumThreadsPerMPI"] = m[3]
        } else if (match(parts[i], /seed([0-9]+)/, m)) {
            data["Seed"] = m[1]
        } else if (match(parts[i], /eps([0-9\.\-e]+)/, m)) {
            data["Epsilon"] = m[1]
        }
    }
}

/__END_FILE__/ {
    yield()
}

match($0, /cut[[:space:]]*([0-9]+)/, m) {
    data["Cut"] = m[1]
}
match($0, /MaxRSS[[:space:]]*([0-9]+)/, m) {
    data["MaxRSS"] = m[1]
}

match($0, /balance[[:space:]]*([0-9\.e\-]+)/, m) {
    data["Balance"] = m[1] - 1
}

match($0, /Total processing time: ([0-9\.e\-]+)/, m) {
    data["TotalTime"] = m[1]
}
match($0, /io time: ([0-9\.e\-]+)/, m) {
    data["IOTime"] = m[1]
}
match($0, /time spent for integrated mapping: ([0-9\.e\-]+)/, m) {
    data["Time"] = m[1]
}

match($0, /timeout/, m) {
    data["Timeout"] = 1
}

END {
    yield()
}

function header() {
    printf "Graph,"
    printf "N,"
    printf "M,"
    printf "K,"
    printf "Seed,"
    printf "Cut,"
    printf "Epsilon,"
    printf "Imbalance,"
    printf "TotalTime,"
    printf "IOTime,"
    printf "Time,"
    printf "NumNodes,"
    printf "NumMPIsPerNode,"
    printf "NumThreadsPerMPI,"
    printf "MaxRSS,"
    printf "Timeout,"
    printf "Failed\n"
}

function yield() {
    if (length(data) <= 1) { return }

    failed = length(data) < 10

    printf "%s,", data["Graph"]
    printf "-1,"
    printf "-1,"
    printf "%d,", data["K"]
    printf "%d,", data["Seed"]
    printf "%d,", data["Cut"]
    printf "%f,", data["Epsilon"]
    printf "%f,", data["Balance"]
    printf "%f,", data["TotalTime"]
    printf "%f,", data["IOTime"]
    printf "%f,", data["Time"]
    printf "1,"
    printf "1," 
    printf "1,"
    printf "%d,", data["MaxRSS"]
    printf "%d,", data["Timeout"]
    printf "%d\n", failed
    
    reset()
}

function reset() {
    split("", data)
    data["Timeout"] = 0
}
