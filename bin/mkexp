#!/usr/bin/env bash
set -o pipefail
set -o errtrace
set -o nounset
set -o errexit

source=${BASH_SOURCE[0]}
while [ -L "$source" ]; do
  script_pwd=$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)
  source=$(readlink "$source")
  [[ $source != /* ]] && source=$script_pwd/$source
done
script_pwd=$(cd -P "$(dirname "$source")" >/dev/null 2>&1 && pwd)
MKEXP_HOME="$(realpath "$script_pwd/../")"

. "$MKEXP_HOME/bin/inc/cli.sh"
. "$MKEXP_HOME/bin/inc/init.sh"

if [[ ! -f "Experiment" ]]; then
    echo "fatal: no Experiment file found in the current working directory"
    exit 1
fi

export CUSTOM_CMAKE_FLAGS=""

################################################################################

. "$MKEXP_HOME/bin/inc/userfuncs.sh"
. "$MKEXP_HOME/bin/inc/sysfuncs.sh"
. "$MKEXP_HOME/bin/inc/env.sh"
. "$MKEXP_HOME/bin/inc/install.sh"
. "$MKEXP_HOME/bin/inc/generate.sh"

gitignore_filename="$PWD/.gitignore"
submit_impl_filename="$PWD/jobs/starter.sh"
submit_filename="$PWD/submit.sh"
job_files_dir="$PWD/jobs"
log_files_dir="$PWD/logs"
results_dir="$PWD/results"

# Create the basic directory structure for the experiments
mkdir -p "$PREFIX" "$PREFIX/bin" "$PREFIX/lib" "$PREFIX/include"

if [[ $mkexp_mode == *"$MKEXP_MODE_GENERATE"* ]]; then 
    cat <<EOT > "$gitignore_filename"
submit.sh
parse.sh
logs/
jobs/
usr/
slurm/
slurm-*
logs*/
all_jobs.sh
EOT

    mkdir -p "$job_files_dir"
    mkdir -p "$log_files_dir"

    echo "#!/usr/bin/env bash" > "$submit_filename"
    echo "#!/usr/bin/env bash" > "$submit_impl_filename"
    chmod +x "$submit_filename"
    chmod +x "$submit_impl_filename"
fi

# Read Experiment file
. Experiment

# Load the system -- there may only be one system definition per Experiment file
LoadSystem "$_system"

if [[ $mkexp_mode == *"$MKEXP_MODE_INSTALL"* ]]; then 
    SetupBuildEnv
fi

HandleExperiment() {
    # Default unset variables
    [[ -v "_nodes_x_mpis_x_threads" ]] || _nodes_x_mpis_x_threads+=("1x1x1")
    [[ -v "_epsilons" ]] || _epsilons+=("0.03")
    [[ -v "_seeds" ]] || _seeds+=("0")

    fetch_everything=0
    install_everything=0
    if [[ $skip_install == "0" ]]; then
        if [[ $mkexp_mode == *"$MKEXP_MODE_INSTALL"* ]]; then
            fetch_everything=1
            install_everything=1
        fi
    fi

    if [[ $fetch_everything == "1" || $install_everything == "1" ]]; then
        InstallLibraries "$fetch_everything" "$install_everything"
        InstallPartitioners "$fetch_everything" "$install_everything"
    fi

    if [[ $mkexp_mode == *"$MKEXP_MODE_GENERATE"* ]]; then
        GenerateInfoFile
        Generate
    fi

    if [[ $mkexp_mode == *"$MKEXP_MODE_RESULTS"* ]]; then
        mkdir -p "$results_dir"
        for algorithm in ${_algorithms[@]}; do 
            if [[ "$results_parser" == "" ]]; then
                base=$(GetAlgorithmBase "$algorithm")
                echo -e "Parsing log files for '$ALGO_COLOR$algorithm$NO_COLOR' using parser '$ALGO_COLOR$base$NO_COLOR'"
                mkresults "$base" "$log_files_dir/$algorithm" > "$results_dir/$algorithm.csv"
            else
                echo -e "Parsing log files for '$ALGO_COLOR$algorithm$NO_COLOR' using parser '$ALGO_COLOR$results_parser$NO_COLOR'"
                mkresults "$results_parser" "$log_files_dir/$algorithm" > "$results_dir/$algorithm.csv"
            fi
        done
    fi 
}

for function_name in $(declare -F | awk '{ print $3 }' | grep '^Experiment'); do 
    PrintExperiment $function_name

    ResetExperiment
    . Experiment 
    $function_name

    experiment_name="$function_name"
    HandleExperiment
done

if [[ $mkexp_mode == *"$MKEXP_MODE_GENERATE"* ]]; then
    GenerateJobfileWrapper "$submit_impl_filename" >> "$submit_filename"
fi

if [[ $mkexp_mode == *"$MKEXP_MODE_CLEAN"* || $mkexp_mode == *"$MKEXP_MODE_PURGE"* ]]; then 
    rm -rf "$submit_impl_filename" "$submit_filename" "$job_files_dir" 
fi

if [[ $mkexp_mode == *"$MKEXP_MODE_PURGE"* ]]; then
    echo "Permanently deleting the following files:"
    echo "- $log_files_dir"
    echo "- $results_dir"
    echo "- $PREFIX"
    echo "- $PWD/INFO.MD"
    read -p "Continue (y/n)?" cont
    if [[ $cont == "y" ]]; then
        rm -rf "$log_files_dir" "$results_dir" "$PREFIX" "$PWD/INFO.MD"
    fi
fi

exit 0

