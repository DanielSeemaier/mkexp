#!/bin/bash
# Unfortunately, the FindTBB.cmake script does not seem to pick up the loaded TBB module on SuperMUC, so we have to specify the path manually
CUSTOM_CMAKE_FLAGS="-DTBB_ROOT=${INTEL_ONEAPI_TBB_BASE:-} $CUSTOM_CMAKE_FLAGS"

# Unfortunately, the Boost module on SuperMUC does not include the non-header-only part of Boost, thus we have to download, transfer and compile 
# it on our own. To do so, follow these steps (you only have to do this once); replace <username> by your SuperMUC username:
#
# 1. Download Boost onto a computer with internet access, then copy it to your $HOME directory on SuperMUC:
#
# wget http://downloads.sourceforge.net/project/boost/boost/1.69.0/boost_1_69_0.tar.bz2 
# rsync boost_1_69_0.tar.bz2 <username>@skx.supermuc.lrz.de:~/
#
# 2. On SuperMUC, extract, build and install Boost to $HOME/usr:
#
# mkdir -p usr 
# bunzip2 boost_1_69_0.tar.bz2
# tar -xf boost_1_69_0.tar 
# cd boost_1_69_0/
# ./bootstrap.sh --prefix=$HOME/usr/
# ./b2
# ./b2 install
CUSTOM_CMAKE_FLAGS="-DBOOST_ROOT=$HOME/usr $CUSTOM_CMAKE_FLAGS"

# Avoid dependency on python (we do not want to build the python interface anyways)
CUSTOM_CMAKE_FLAGS="-DKAHYPAR_PYTHON=OFF $CUSTOM_CMAKE_FLAGS"

# If you don't want to run experiments with the current main branch, define a custom version of Mt-KaHyPar 
# by specifying a branch or commit hash like this:
#
# DefineAlgorithmVersion MyMtKaHyPar MtKaHyPar origin/my/feature/branch
# 
# Then use MyMtKaHyPar instead of MtKaHyPar in the next line

# Configure Mt-KaHyPar for graphs 
DefineAlgorithm Graph MtKaHyPar --instance-type=graph -o cut 

# ... configure your own algorithms here, this is just an example ...
DefineAlgorithm DefaultGraph Graph --preset-type=default 
DefineAlgorithm QualityGraph Graph --preset-type=quality

# Keep as-it for this type of experiment
System SuperMUC-SlotScheduler

# Your SuperMUC username
Username <username> 

# Your SuperMUC project (should be shown after logging in)
Project <project>

# Max running time for a single worker
# shorter = can do less, but is usually scheduled for execution sooner
Timelimit 8:00:00 

# Keep as-it for this type of experiment
MPI IMPI 

ExperimentDefaultVsQuality() {
    # Configurations included in this experiment
    Algorithms DefaultGraph QualityGraph

    # Values for k that should be run
    Ks 2 4 8 

    # Seeds for PRNG, more values = more repetitions
    Seeds 1 

    #       /-- run 8 workers at a time, can be changed to other values
    #       | /-- should be always 1 for this type of experiment
    #       | |  /-- number of threads used by Mt-KaHyPar
    Threads 8x1x32

    # All graphs that should be included in the experiment 
    # (refers to a directory on SuperMUC, so you have to upload the graphs first)
    Graphs ${WORK:-}/benchmark/
}
